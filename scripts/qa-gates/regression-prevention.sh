#!/bin/bash
# Regression Prevention Script
# Ensures new changes don't break existing functionality

set -e
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/../.." && pwd)"

echo "üö´ Running Regression Prevention..."
echo "==================================="

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m'

REGRESSION_TESTS_PASSED=0
REGRESSION_TESTS_FAILED=0

test_regression() {
    local test_name="$1"
    local test_command="$2"
    local description="$3"

    echo -e "\nüîç Testing: $test_name"
    echo "Description: $description"
    echo "----------------------------------------"

    if eval "$test_command"; then
        echo -e "${GREEN}‚úÖ NO REGRESSION: $test_name${NC}"
        ((REGRESSION_TESTS_PASSED++))
        return 0
    else
        echo -e "${RED}‚ùå REGRESSION DETECTED: $test_name${NC}"
        echo "üí• This change broke existing functionality!"
        ((REGRESSION_TESTS_FAILED++))
        return 1
    fi
}

cd "$PROJECT_ROOT"

# Critical User Journey Tests
echo -e "${PURPLE}üë§ Critical User Journey Regression Tests${NC}"
echo "=========================================="

test_regression \
    "VP Dashboard Access" \
    "npm run test:e2e -- --spec='**/vp-dashboard.spec.*' --timeout=120000" \
    "VP can access dashboard and view KPIs within 2 seconds"

test_regression \
    "Opportunity Creation & Management" \
    "npm run test:e2e -- --spec='**/opportunity-lifecycle.spec.*' --timeout=180000" \
    "Complete opportunity lifecycle from lead to closed"

test_regression \
    "Partner Management Workflow" \
    "npm run test:e2e -- --spec='**/partner-management.spec.*' --timeout=120000" \
    "Add, edit, and manage partners with commission structures"

test_regression \
    "Commission Calculation Flow" \
    "npm run test:e2e -- --spec='**/commission.spec.*' --timeout=90000" \
    "Commission calculations work for all partner types"

test_regression \
    "Pipeline Stage Management" \
    "npm run test:e2e -- --spec='**/pipeline.spec.*' --timeout=120000" \
    "Move opportunities through pipeline stages correctly"

test_regression \
    "Weekly Status Submission" \
    "npm run test:e2e -- --spec='**/weekly-status.spec.*' --timeout=90000" \
    "Team members can submit weekly status updates"

# Core Business Logic Regression Tests
echo -e "\n${BLUE}üíº Business Logic Regression Tests${NC}"
echo "=================================="

test_regression \
    "Commission Calculation Accuracy" \
    "npm test -- --testNamePattern='commission.*calculation' --coverage=false" \
    "All commission types calculate correctly (referral 15%, reseller 30%, etc.)"

test_regression \
    "Pipeline Value Calculations" \
    "npm test -- --testNamePattern='pipeline.*value|weighted.*pipeline' --coverage=false" \
    "Pipeline values calculated as Deal Value √ó Stage Probability"

test_regression \
    "Goal Progress Tracking" \
    "npm test -- --testNamePattern='goal.*progress|quarterly.*target' --coverage=false" \
    "Progress toward \$250K quarterly target tracked accurately"

test_regression \
    "Partner Health Scoring" \
    "npm test -- --testNamePattern='partner.*health|relationship.*score' --coverage=false" \
    "Partner relationship health scores calculated correctly"

test_regression \
    "Stage Progression Rules" \
    "npm test -- --testNamePattern='stage.*progression|pipeline.*flow' --coverage=false" \
    "Opportunities advance through stages with proper validation"

# Data Integrity Regression Tests
echo -e "\n${BLUE}üõ°Ô∏è Data Integrity Regression Tests${NC}"
echo "==================================="

test_regression \
    "Database Referential Integrity" \
    "npm test -- --testNamePattern='referential.*integrity|foreign.*key' --coverage=false" \
    "All foreign key relationships maintained"

test_regression \
    "User Permission Enforcement" \
    "npm test -- --testNamePattern='permission|authorization|role.*access' --coverage=false" \
    "Role-based access control (VP, Sales Manager, Partnership Manager)"

test_regression \
    "Audit Trail Completeness" \
    "npm test -- --testNamePattern='audit.*trail|change.*history' --coverage=false" \
    "All critical changes logged with user and timestamp"

test_regression \
    "Data Validation Rules" \
    "npm test -- --testNamePattern='validation|input.*check' --coverage=false" \
    "Invalid data rejected, valid data accepted"

# API Regression Tests
echo -e "\n${BLUE}üîó API Regression Tests${NC}"
echo "======================="

test_regression \
    "Authentication Endpoints" \
    "npm test -- --testNamePattern='auth.*endpoint|login.*api' --coverage=false" \
    "Login, logout, token refresh work correctly"

test_regression \
    "Partner API Endpoints" \
    "npm test -- --testNamePattern='partner.*api|partner.*endpoint' --coverage=false" \
    "CRUD operations for partners function correctly"

test_regression \
    "Opportunity API Endpoints" \
    "npm test -- --testNamePattern='opportunity.*api|opportunity.*endpoint' --coverage=false" \
    "Opportunity management APIs work correctly"

test_regression \
    "Dashboard API Performance" \
    "npm test -- --testNamePattern='dashboard.*api|kpi.*endpoint' --coverage=false" \
    "Dashboard APIs respond within performance targets"

# Performance Regression Tests
echo -e "\n${BLUE}‚ö° Performance Regression Tests${NC}"
echo "==============================="

test_regression \
    "Dashboard Load Time" \
    "npm run test:performance:dashboard || npm test -- --testNamePattern='dashboard.*performance' --coverage=false" \
    "Dashboard loads in under 2 seconds"

test_regression \
    "API Response Times" \
    "npm run test:performance:api || npm test -- --testNamePattern='api.*performance' --coverage=false" \
    "API endpoints respond in under 500ms"

test_regression \
    "Database Query Performance" \
    "npm run test:performance:db || npm test -- --testNamePattern='query.*performance' --coverage=false" \
    "Database queries execute in under 100ms"

test_regression \
    "Concurrent User Support" \
    "npm run test:performance:concurrent || echo 'Concurrent test not configured - SKIP'" \
    "System supports 10 concurrent users without degradation"

# Security Regression Tests
echo -e "\n${BLUE}üîí Security Regression Tests${NC}"
echo "============================"

test_regression \
    "Authentication Security" \
    "npm test -- --testNamePattern='auth.*security|jwt.*validation' --coverage=false" \
    "JWT tokens validated, sessions managed securely"

test_regression \
    "Input Sanitization" \
    "npm test -- --testNamePattern='input.*sanitiz|xss.*prevent' --coverage=false" \
    "XSS and injection attacks prevented"

test_regression \
    "SQL Injection Prevention" \
    "npm test -- --testNamePattern='sql.*injection|parameteriz' --coverage=false" \
    "Parameterized queries prevent SQL injection"

test_regression \
    "Sensitive Data Protection" \
    "npm test -- --testNamePattern='encrypt|sensitive.*data' --coverage=false" \
    "Commission and financial data properly encrypted"

# Critical Business Scenario Tests
echo -e "\n${PURPLE}üéØ Critical Business Scenario Tests${NC}"
echo "===================================="

# Test critical revenue scenarios
echo "Testing high-value opportunity scenarios..."
test_regression \
    "High-Value Opportunity Processing" \
    "npm test -- --testNamePattern='high.*value|large.*deal' --coverage=false" \
    "\$1M+ opportunities processed correctly"

echo "Testing commission edge cases..."
test_regression \
    "Commission Edge Cases" \
    "npm test -- --testNamePattern='commission.*edge|commission.*special' --coverage=false" \
    "Complex commission scenarios (caps, floors, overrides)"

echo "Testing multi-partner scenarios..."
test_regression \
    "Multi-Partner Management" \
    "npm test -- --testNamePattern='multiple.*partner|partner.*scale' --coverage=false" \
    "20+ partners managed without conflicts"

# Weekly Status and Task Management
echo "Testing weekly operations..."
test_regression \
    "Weekly Status Operations" \
    "npm test -- --testNamePattern='weekly.*status|task.*rollover' --coverage=false" \
    "Weekly status submission and task rollover work correctly"

# System Health Checks
echo -e "\n${BLUE}üè• System Health Regression Tests${NC}"
echo "=================================="

test_regression \
    "Database Connection Health" \
    "npm run test:db:health || npm test -- --testNamePattern='db.*connection|database.*health' --coverage=false" \
    "Database connections stable and performant"

test_regression \
    "Memory Usage Stability" \
    "npm run test:memory || echo 'Memory test not configured - SKIP'" \
    "No memory leaks or excessive resource usage"

test_regression \
    "Error Handling Robustness" \
    "npm test -- --testNamePattern='error.*handling|exception.*catch' --coverage=false" \
    "Errors handled gracefully without system crashes"

# Frontend Regression Tests
echo -e "\n${BLUE}üñ•Ô∏è Frontend Regression Tests${NC}"
echo "============================"

test_regression \
    "React Component Rendering" \
    "npm test -- --testNamePattern='component.*render|react.*mount' --coverage=false" \
    "All components render without errors"

test_regression \
    "State Management" \
    "npm test -- --testNamePattern='state.*management|store.*update' --coverage=false" \
    "Application state managed correctly"

test_regression \
    "Form Validation" \
    "npm test -- --testNamePattern='form.*validation|input.*check' --coverage=false" \
    "Forms validate input and handle submission correctly"

# Integration Regression Tests
echo -e "\n${BLUE}üîÑ Integration Regression Tests${NC}"
echo "==============================="

test_regression \
    "Frontend-Backend Integration" \
    "npm run test:integration || npm test -- --testNamePattern='integration|api.*client' --coverage=false" \
    "Frontend communicates correctly with backend APIs"

test_regression \
    "Database Integration" \
    "npm test -- --testNamePattern='database.*integration|repo.*test' --coverage=false" \
    "Data layer operations work correctly"

test_regression \
    "Service Layer Integration" \
    "npm test -- --testNamePattern='service.*integration|business.*logic' --coverage=false" \
    "Business services integrate correctly"

# Generate regression test report
echo -e "\nüìä Generating regression test report..."
npm run test:coverage:report || echo "Coverage report generation not configured"

# Final Results
echo -e "\nüèÅ Regression Prevention Summary"
echo "================================="
echo -e "Tests Passed: ${GREEN}$REGRESSION_TESTS_PASSED${NC}"
echo -e "Regressions Found: ${RED}$REGRESSION_TESTS_FAILED${NC}"

if [ $REGRESSION_TESTS_FAILED -gt 0 ]; then
    echo -e "\n${RED}‚ùå REGRESSION DETECTED - DEPLOYMENT BLOCKED${NC}"
    echo "üö® New changes have broken existing functionality!"
    echo ""
    echo "Critical actions required:"
    echo "  1. Review failing tests above"
    echo "  2. Revert breaking changes or fix regressions"
    echo "  3. Re-run regression tests until all pass"
    echo "  4. Do not deploy until regression count = 0"
    echo ""
    echo "‚ö†Ô∏è  Deploying with regressions could disrupt \$250K revenue operations"
    echo ""
    echo "üîß Debug commands:"
    echo "  npm test -- --testNamePattern='commission'"
    echo "  npm test -- --testNamePattern='pipeline'"
    echo "  npm run test:e2e"
    exit 1
else
    echo -e "\n${GREEN}‚úÖ NO REGRESSIONS DETECTED${NC}"
    echo "üéâ All existing functionality preserved"
    echo ""
    echo "‚úì Critical user journeys working"
    echo "‚úì Business logic intact"
    echo "‚úì Data integrity maintained"
    echo "‚úì API endpoints functional"
    echo "‚úì Performance targets met"
    echo "‚úì Security measures active"
    echo ""
    echo "üöÄ Safe to deploy - \$250K revenue operations protected"
    echo ""
    echo "üìà New features can be released without risk to existing platform"
    exit 0
fi
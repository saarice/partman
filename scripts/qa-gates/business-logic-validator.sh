#!/bin/bash
# Business Logic Validation Script
# Ensures core business functionality remains intact

set -e
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/../.." && pwd)"

echo "üíº Validating Business Logic..."
echo "==============================="

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

VALIDATIONS_PASSED=0
VALIDATIONS_FAILED=0

validate_business_rule() {
    local rule_name="$1"
    local validation_command="$2"
    local expected_result="$3"

    echo -e "\nüîç Validating: $rule_name"
    echo "----------------------------------------"

    if eval "$validation_command"; then
        echo -e "${GREEN}‚úÖ VALID: $rule_name${NC}"
        ((VALIDATIONS_PASSED++))
        return 0
    else
        echo -e "${RED}‚ùå INVALID: $rule_name${NC}"
        echo "   Expected: $expected_result"
        ((VALIDATIONS_FAILED++))
        return 1
    fi
}

cd "$PROJECT_ROOT"

# Commission Calculation Rules
echo -e "${BLUE}üìä Commission Calculation Rules${NC}"
echo "================================"

validate_business_rule \
    "Referral Commission: 15% default rate" \
    "npm test -- --testNamePattern='referral.*15.*percent|default.*referral.*rate' --passWithNoTests" \
    "Commission = Deal Value √ó 15%"

validate_business_rule \
    "Reseller Commission: 30% default rate" \
    "npm test -- --testNamePattern='reseller.*30.*percent|default.*reseller.*rate' --passWithNoTests" \
    "Commission = Deal Value √ó 30%"

validate_business_rule \
    "Commission caps and floors respected" \
    "npm test -- --testNamePattern='commission.*(cap|floor|limit)' --passWithNoTests" \
    "Commission within configured bounds"

validate_business_rule \
    "Deal-specific commission overrides work" \
    "npm test -- --testNamePattern='commission.*override|custom.*commission' --passWithNoTests" \
    "Deal overrides take precedence"

# Pipeline Stage Rules
echo -e "\n${BLUE}üîÑ Pipeline Stage Rules${NC}"
echo "========================"

validate_business_rule \
    "Stage progression follows Lead‚ÜíDemo‚ÜíPOC‚ÜíProposal‚ÜíClosed" \
    "npm test -- --testNamePattern='stage.*progression|pipeline.*flow' --passWithNoTests" \
    "Stages advance in correct order"

validate_business_rule \
    "Opportunity probability updates with stage" \
    "npm test -- --testNamePattern='probability.*stage|stage.*probability' --passWithNoTests" \
    "Probability increases with stage advancement"

validate_business_rule \
    "Pipeline value calculations are accurate" \
    "npm test -- --testNamePattern='pipeline.*value|weighted.*pipeline' --passWithNoTests" \
    "Weighted value = Deal Value √ó Probability"

# Goal Tracking Rules
echo -e "\n${BLUE}üéØ Goal Tracking Rules${NC}"
echo "======================="

validate_business_rule \
    "Quarterly revenue target: \$250K" \
    "npm test -- --testNamePattern='250.*target|quarterly.*250' --passWithNoTests" \
    "Target correctly set and tracked"

validate_business_rule \
    "Goal progress calculation accurate" \
    "npm test -- --testNamePattern='goal.*progress|target.*progress' --passWithNoTests" \
    "Progress = (Current Revenue / Target) √ó 100"

validate_business_rule \
    "Team member goal allocation correct" \
    "npm test -- --testNamePattern='team.*goal|individual.*target' --passWithNoTests" \
    "Individual goals sum to team target"

# Partner Relationship Rules
echo -e "\n${BLUE}ü§ù Partner Relationship Rules${NC}"
echo "=============================="

validate_business_rule \
    "Partner health scoring algorithm" \
    "npm test -- --testNamePattern='partner.*health|relationship.*score' --passWithNoTests" \
    "Health score based on interaction frequency and revenue"

validate_business_rule \
    "20+ partners can be managed" \
    "npm test -- --testNamePattern='partner.*(scale|multiple|20)' --passWithNoTests" \
    "System supports 20+ active partners"

validate_business_rule \
    "Partner domain categorization" \
    "npm test -- --testNamePattern='partner.*domain|domain.*categor' --passWithNoTests" \
    "Partners categorized by FinOps, Security, etc."

# Data Integrity Rules
echo -e "\n${BLUE}üõ°Ô∏è Data Integrity Rules${NC}"
echo "========================"

validate_business_rule \
    "No orphaned opportunities" \
    "npm test -- --testNamePattern='orphan|referential.*integrity' --passWithNoTests" \
    "All opportunities linked to valid partners"

validate_business_rule \
    "User permissions enforced" \
    "npm test -- --testNamePattern='permission|authorization|role' --passWithNoTests" \
    "VP, Sales Manager, Partnership Manager roles enforced"

validate_business_rule \
    "Audit trail completeness" \
    "npm test -- --testNamePattern='audit|history|trail' --passWithNoTests" \
    "All critical changes logged"

# Performance Rules
echo -e "\n${BLUE}‚ö° Performance Rules${NC}"
echo "==================="

validate_business_rule \
    "Dashboard loads within 2 seconds" \
    "npm run test:performance:dashboard || npm test -- --testNamePattern='dashboard.*performance|load.*time.*2' --passWithNoTests" \
    "Dashboard load time < 2000ms"

validate_business_rule \
    "API responses under 500ms" \
    "npm run test:performance:api || npm test -- --testNamePattern='api.*performance|response.*time.*500' --passWithNoTests" \
    "API response time < 500ms"

validate_business_rule \
    "Supports 10 concurrent users" \
    "npm run test:performance:concurrent || npm test -- --testNamePattern='concurrent.*users|load.*10' --passWithNoTests" \
    "10 concurrent users without degradation"

# Business Workflow Rules
echo -e "\n${BLUE}üîÑ Business Workflow Rules${NC}"
echo "=========================="

validate_business_rule \
    "Weekly status submission workflow" \
    "npm test -- --testNamePattern='weekly.*status|status.*submission' --passWithNoTests" \
    "Team can submit status in <15 minutes"

validate_business_rule \
    "Task rollover logic" \
    "npm test -- --testNamePattern='task.*rollover|incomplete.*task' --passWithNoTests" \
    "Incomplete tasks roll to next week"

validate_business_rule \
    "Alert generation rules" \
    "npm test -- --testNamePattern='alert.*generation|notification.*rule' --passWithNoTests" \
    "Alerts trigger on defined conditions"

# Security Rules
echo -e "\n${BLUE}üîí Security Rules${NC}"
echo "=================="

validate_business_rule \
    "Authentication required for all endpoints" \
    "npm test -- --testNamePattern='auth.*required|endpoint.*security' --passWithNoTests" \
    "No unauthorized access to protected resources"

validate_business_rule \
    "Commission data encryption" \
    "npm test -- --testNamePattern='commission.*encrypt|sensitive.*data' --passWithNoTests" \
    "Sensitive financial data encrypted"

validate_business_rule \
    "Input validation prevents injection" \
    "npm test -- --testNamePattern='input.*validation|injection.*prevent' --passWithNoTests" \
    "SQL injection and XSS prevented"

# Critical Business Rules Summary
echo -e "\n${BLUE}üìã Critical Business Rules Validation${NC}"
echo "======================================"

# Run specific high-value tests
echo "Running commission accuracy regression tests..."
npm test -- --testNamePattern='commission' --verbose || true

echo -e "\nRunning pipeline integrity tests..."
npm test -- --testNamePattern='pipeline|opportunity' --verbose || true

echo -e "\nRunning goal tracking tests..."
npm test -- --testNamePattern='goal|target' --verbose || true

# Final Summary
echo -e "\nüèÅ Business Logic Validation Summary"
echo "===================================="
echo -e "Validated: ${GREEN}$VALIDATIONS_PASSED${NC}"
echo -e "Failed: ${RED}$VALIDATIONS_FAILED${NC}"

if [ $VALIDATIONS_FAILED -gt 0 ]; then
    echo -e "\n${RED}‚ùå BUSINESS LOGIC VALIDATION FAILED${NC}"
    echo "üö® Critical business rules are not functioning correctly"
    echo ""
    echo "Immediate action required:"
    echo "  1. Review failed validation rules above"
    echo "  2. Run specific test suites: npm test -- --testNamePattern='commission|pipeline|goal'"
    echo "  3. Do not deploy until all business rules pass"
    echo ""
    echo "‚ö†Ô∏è  This could affect \$250K quarterly revenue operations"
    exit 1
else
    echo -e "\n${GREEN}‚úÖ ALL BUSINESS LOGIC VALIDATED${NC}"
    echo "üéØ Core business rules functioning correctly"
    echo ""
    echo "‚úì Commission calculations accurate"
    echo "‚úì Pipeline progression working"
    echo "‚úì Goal tracking operational"
    echo "‚úì Partner management functional"
    echo "‚úì Data integrity maintained"
    echo "‚úì Performance targets met"
    echo ""
    echo "üöÄ Safe to proceed with \$250K revenue operations"
    exit 0
fi
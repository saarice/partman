name: CI/CD Pipeline

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master]

env:
  NODE_VERSION: '18'

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint
        continue-on-error: true # Warnings don't block

  test-backend:
    name: Test Backend
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: partman_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run backend tests
        working-directory: ./apps/api
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/partman_test
          JWT_SECRET: test-secret-for-ci
          NODE_ENV: test
        run: npm test -- --coverage

      - name: Upload backend coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./apps/api/coverage/lcov.info
          flags: backend
          name: backend-coverage

  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run frontend tests
        working-directory: ./apps/web
        run: npm test -- --coverage --passWithNoTests

      - name: Build frontend
        working-directory: ./apps/web
        run: npm run build

      - name: Upload frontend coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./apps/web/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: partman_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright
        run: npx playwright install --with-deps chromium

      - name: Start backend server
        working-directory: ./apps/api
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/partman_test
          JWT_SECRET: test-secret-for-ci
          PORT: 3001
        run: |
          npm run migrate &
          npm run dev &
          sleep 10

      - name: Start frontend server
        working-directory: ./apps/web
        env:
          VITE_API_URL: http://localhost:3001
        run: |
          npm run dev &
          sleep 10

      - name: Run E2E tests
        working-directory: ./apps/web
        run: npx playwright test

      - name: Upload E2E test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: playwright-results
          path: apps/web/test-results/
          retention-days: 7

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit (backend)
        working-directory: ./apps/api
        run: npm audit --audit-level=high
        continue-on-error: true

      - name: Run security audit (frontend)
        working-directory: ./apps/web
        run: npm audit --audit-level=high
        continue-on-error: true

  type-check:
    name: TypeScript Type Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Type check backend
        working-directory: ./apps/api
        run: npx tsc --noEmit

      - name: Type check frontend
        working-directory: ./apps/web
        run: npx tsc --noEmit

  build-check:
    name: Build Check
    runs-on: ubuntu-latest
    needs: [lint, test-backend, test-frontend, type-check]
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build backend
        working-directory: ./apps/api
        run: npm run build

      - name: Build frontend
        working-directory: ./apps/web
        run: npm run build

      - name: Check build artifacts
        run: |
          test -d apps/api/dist || exit 1
          test -d apps/web/dist || exit 1
          echo "✅ All build artifacts present"

  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    needs: [lint, test-backend, test-frontend, security-audit, type-check, build-check]
    steps:
      - name: All checks passed
        run: echo "✅ All quality gates passed successfully"
